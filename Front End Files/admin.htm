<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Faculty Feedback Dashboard</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f4f8fb;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 1100px;
      margin: 40px auto;
      background: #fff;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
    }

    h2 {
      text-align: center;
      color: #333;
      margin-bottom: 25px;
    }

    .top-buttons {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }

    .top-buttons a, .top-buttons button {
      flex: 1;
      text-align: center;
      padding: 12px;
      font-size: 16px;
      border-radius: 8px;
      text-decoration: none;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .top-buttons a {
      background-color: #2196F3;
      color: white;
      border: none;
    }

    .top-buttons a:hover {
      background-color: #1976D2;
    }

    .btn-logout {
      background-color: #f44336;
      color: white;
      border: none;
    }

    .btn-logout:hover {
      background-color: #d32f2f;
    }

    .filters {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
    }

    .filters div {
      flex: 1 1 250px;
      display: flex;
      flex-direction: column;
    }

    .filters label {
      margin-bottom: 6px;
      font-weight: 600;
      color: #333;
    }

    .filters select,
    .filters input {
      padding: 10px;
      font-size: 15px;
      border-radius: 6px;
      border: 1px solid #2196F3;
      background-color: #ffffff;
      color: #333;
    }

    .btn-load {
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 12px;
      width: 100%;
      font-size: 16px;
      margin-bottom: 20px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .btn-load:hover {
      background-color: #388E3C;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #2196F3;
      color: white;
    }

    tr:hover {
      background-color: #f1f1f1;
    }

    #loading {
      text-align: center;
      margin: 20px 0;
      color: #555;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="top-buttons">
      <a href="index.html">â¬… Back to Feedback Form</a>
      <button class="btn-logout" onclick="logout()">ðŸ”’ Logout</button>
    </div>

    <h2>Faculty Feedback Dashboard</h2>

    <div class="filters">
      <div>
        <label for="filterCourse">Filter by Course</label>
        <select id="filterCourse">
          <option value="">All Courses</option>
        </select>
      </div>

      <div>
        <label for="filterFaculty">Filter by Faculty</label>
        <select id="filterFaculty">
          <option value="">All Faculty</option>
        </select>
      </div>

      <div>
        <label for="searchInput">Search Comments</label>
        <input type="text" id="searchInput" placeholder="e.g., helpful, good..." />
      </div>
    </div>

    <button class="btn-load" onclick="fetchFeedback()">ðŸ”„ Load Feedback</button>
    <div id="loading" style="display: none;">Loading feedback...</div>

    <table id="feedbackTable">
      <thead>
        <tr>
          <th>Course</th>
          <th>Faculty</th>
          <th>Voice</th>
          <th>Behavior</th>
          <th>Response</th>
          <th>Overall</th>
          <th>Comments</th>
          <th>Timestamp (IST)</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- Keep your current HTML and CSS same -->

<script>
  if (localStorage.getItem("isAdminLoggedIn") !== "true") {
    window.location.href = "login.html";
  }

  function logout() {
    localStorage.removeItem("isAdminLoggedIn");
    window.location.href = "login.html";
  }

  function convertToIST(utcTime) {
    const date = new Date(utcTime);
    const istOffsetMs = 5.5 * 60 * 60 * 1000;
    const istDate = new Date(date.getTime() + istOffsetMs);
    return istDate.toLocaleString('en-IN');
  }

  let sortedData = []; // global variable to preserve sorted data

  async function fetchFeedback() {
    document.getElementById('loading').style.display = 'block';
    const tableBody = document.querySelector('#feedbackTable tbody');
    tableBody.innerHTML = '';

    try {
      const response = await fetch('https://a6sy7p7sf0.execute-api.us-east-1.amazonaws.com/prod/get');
      if (!response.ok) throw new Error('Failed to fetch data');

      const data = await response.json();

      // Ensure all items have timestamps and sort them
      sortedData = data
        .filter(item => item.timestamp)
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

      const courseSet = new Set();
      const facultySet = new Set();

      sortedData.forEach(item => {
        courseSet.add(item.course);
        facultySet.add(item.faculty);
      });

      const courseFilter = document.getElementById("filterCourse");
      const facultyFilter = document.getElementById("filterFaculty");

      courseFilter.innerHTML = '<option value="">All Courses</option>';
      facultyFilter.innerHTML = '<option value="">All Faculty</option>';

      [...courseSet].sort().forEach(course => {
        courseFilter.innerHTML += `<option value="${course}">${course}</option>`;
      });
      [...facultySet].sort().forEach(faculty => {
        facultyFilter.innerHTML += `<option value="${faculty}">${faculty}</option>`;
      });

      // Initial render with all sorted data
      applyFilters();

      // Re-apply filters on change
      courseFilter.onchange = applyFilters;
      facultyFilter.onchange = applyFilters;
      document.getElementById("searchInput").oninput = applyFilters;

    } catch (error) {
      console.error(error);
      alert('Error loading feedback data.');
    } finally {
      document.getElementById('loading').style.display = 'none';
    }
  }

  function applyFilters() {
    const course = document.getElementById("filterCourse").value;
    const faculty = document.getElementById("filterFaculty").value;
    const search = document.getElementById("searchInput").value.toLowerCase();

    const filtered = sortedData.filter(item => {
      return (!course || item.course === course) &&
             (!faculty || item.faculty === faculty) &&
             (!search || (item.comments && item.comments.toLowerCase().includes(search)));
    });

    renderTable(filtered);
  }

  function renderTable(data) {
    const tableBody = document.querySelector('#feedbackTable tbody');
    tableBody.innerHTML = '';
    data.forEach(item => {
      const row = `
        <tr>
          <td>${item.course || '-'}</td>
          <td>${item.faculty || '-'}</td>
          <td>${item.voice || '-'}</td>
          <td>${item.behavior || '-'}</td>
          <td>${item.response || '-'}</td>
          <td>${item.rating || '-'}</td>
          <td>${item.comments || '-'}</td>
          <td>${item.timestamp ? convertToIST(item.timestamp) : '-'}</td>
        </tr>
      `;
      tableBody.insertAdjacentHTML('beforeend', row);
    });
  }
</script>
</body>
</html>
